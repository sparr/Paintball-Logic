pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- paintball logic
-- by sparr

-- colored balls roll around interacting with each other
-- some grid elements change balls
-- try to turn one sequence of balls into another

function _init()
 -- description of the simulation grid
 grid = {}
 grid.width = 11
 grid.height = 11
 grid.cell_size = 8
 grid.cell_radius = grid.cell_size / 2
 grid.ball_radius = grid.cell_radius - 1
 grid.edge_left = 16
 grid.edge_right = grid.edge_left + grid.width * grid.cell_size
 grid.edge_top = 31
 grid.edge_bottom = grid.edge_top + grid.height * grid.cell_size
 grid.fence_left = grid.edge_left + grid.cell_size / 2
 grid.fence_right = grid.edge_right - grid.cell_size / 2
 grid.fence_top = grid.edge_top + grid.cell_size / 2
 grid.fence_bottom = grid.edge_bottom - grid.cell_size / 2
 grid.color = 5

 -- state of the inputs and outputs of the current puzzle
 queues = {
  {x=  4, y= 34, dx=0, dy= 6, r=2, func=circfill, balls={}}, -- input
  {x=120, y=116, dx=0, dy=-6, r=2, func=circfill, balls={}}, -- output
  {x=120, y=116, dx=0, dy=-6, r=2, func=circ    , balls={}}, -- target
 }
 
 -- metadata about types of blocks
 block_types = {
  empty = {
   name = "",
   next = "hue",
  },
  trap = {
   name = "trap",
   next = "trap",
   sprite_fore =  56,
   trigger_func =
    function(block, ball)
     review_status = "failed"
     review_color = 8
     mode = 3
    end,
  },
  input = {
   name = "input",
   next = "input",
   sprite_fore = 48,
   rotations = 4,
   -- walls = 14, -- south west north
  },
  output = {
   name = "output",
   next = "output",
   sprite_fore = 50,
   trigger_func =
    function(block, ball)
     queues[2].balls[#queues[2].balls+1] = ball.color
     del(balls, ball)
    end,
  },
  hue = {
   name = "hue",
   sprite_fore = 51,
   variations = 2,
   trigger_func =
    function(block, ball)
     if (block.variation % 2 == 0) then
      ball.color = (ball.color + 1) % 6
     else
      ball.color = (ball.color + 5) % 6
     end
    end,
   next = "mirror",
  },
  mirror = {
   name = "mirror",
   sprite_fore = 53,
   mirrors = 2,
   trigger_func =
    function(block, ball)
     if block.mirror % 2 == 0 then
      ball.dx, ball.dy = ball.dy, ball.dx
     else
      ball.dx, ball.dy = -ball.dy, -ball.dx
     end
    end,
   next = "split",
  },
  split = {
   name = "split",
   sprite_fore = 54,
   rotations = 4,
   -- walls = 1,
   trigger_func =
    function(block, ball)
     if block.rotation % 4 == delta_to_direction(ball.dx, ball.dy) then
      ball.dx, ball.dy = direction_to_delta(block.rotation + 1 % 4)
      queue_launch(block, (block.rotation + 3) % 4, ball.color)
     elseif
      (
       (block.rotation + 1) % 4 == delta_to_direction(ball.dx, ball.dy) or 
       (block.rotation + 3) % 4 == delta_to_direction(ball.dx, ball.dy)
      ) then
      ball.dx, ball.dy = direction_to_delta((block.rotation + 2) % 4)
     end
    end,
   next = "empty",
  },
 }
 for name,block_type in pairs(block_types) do
  block_type.next = block_types[block_type.next and block_type.next or name]
 end

 -- redraw the screen on the next draw?
 redraw = true

 ticks_per_frame = 1
 pixels_per_frame = 1
 pixels_since_previous_turn = 0
 pixels_per_frame_next = 1

 levels = {
  {
   name = "intro",
   input = {0,1,2,3,4,5},
   output = {5,4,3,2,1,0},
   hint = "just run and watch",
  },
  {
   name = "hue",
   input = {0,1,2,3,4,5},
   output = {0,5,4,3,2,1},
   hint = "add a hue block",
  },
  {
   name = "hue2",
   input = {0,1,2,3,4,5},
   output = {4,3,2,1,0,5},
   blocks = {
    {row=6, col=6, block_type=block_types["hue"]},
   },
   hint = "press+hold the hue block",
  },
  {
   name = "mirror",
   input = {0,1,2,3,4,5},
   output = {5,4,3,2,1,0},
   blocks = {
    {row=6, col=6, block_type=block_types["trap"]},
   },
   hint = "add/rotate mirror blocks",
  },
  {
   name = "rotate",
   input = {0,1,2,3,4,5},
   output = {5,4,3,2,1,0},
   blocks = {
    {row=6, col=2, block_type=block_types["trap"]},
   },
   hint = "press+hold the input block",
  },
  {
   name = "double",
   input = {0,1,2,3,4,5},
   output = {5,5,4,4,3,3,2,2,1,1,0,0},
   hint = "add a splitter and mirrors",
  },
  {
   name = "final",
   input = {0,1,2,3,4,5},
   output = {5,1,0,4,0,5,3,5,4,2,4,3,1,3,2,0,2,1},
   hint = "everything you've learned",
  },
  {
   name = "final2",
   input = {0,1,2,3,4,5},
   output = {5,1,0,4,0,5,3,5,4,2,4,3,1,3,2,0,2,1},
   blocks = {
    {row=6, col=3, block_type=block_types["split"]},
    {row=8, col=3, block_type=block_types["mirror"]},
    {row=8, col=10, block_type=block_types["split"]},
    {row=6, col=10, block_type=block_types["split"], rotation=2},
    {row=9, col=10, block_type=block_types["mirror"]},
    {row=9, col=11, block_type=block_types["mirror"], mirror=1},
    {row=2, col=3, block_type=block_types["mirror"], mirror=1},
    {row=2, col=5, block_type=block_types["hue"]},
    {row=7, col=11, block_type=block_types["hue"]},
    {row=8, col=11, block_type=block_types["hue"]},
    {row=2, col=10, block_type=block_types["mirror"]},
   },
   hint = "spoiler alert!",
  },
 }
 for i=1,#levels do
  levels[i].index = i
  levels[i].next = levels[(i % #levels) + 1]
 end
 level = levels[8]
 init_level()

 mode = 1
 modes = {"edit","run","review"}

 edit_long_press_threshold = 16
 edit_long_press_repeat = 16

 launch_queue = {}
end

function delta_to_direction(dx,dy)
 if dx>0 then return 0 end
 if dy>0 then return 1 end
 if dx<0 then return 2 end
 if dy<0 then return 3 end
 return nil
end

function direction_to_delta(dir)
 if dir == 0 then return 1,0 end
 if dir == 1 then return 0,1 end
 if dir == 2 then return -1,0 end
 if dir == 3 then return 0,-1 end
 return nil
end

function block_change(block)
 block.block_type = block.block_type.next
end

function block_vary(block)
 if block.block_type.rotations ~= nil then
  block.rotation += 1
 end
 if block.block_type.rotations == nil or block.rotation % block.block_type.rotations == 0 then
  block.mirror += 1
 end
 if block.block_type.mirrors == nil or block.mirror % block.block_type.mirrors == 0 then
  block.variation += 1
 end
end

function init_level_queues()
 queues[1].balls = {}
 for i,c in pairs(level.input) do
  queues[1].balls[i] = c
 end
 queues[2].balls = {}
 queues[3].balls = {}
 for i,c in pairs(level.output) do
  queues[3].balls[i] = c
 end
end

function init_level_blocks()
 edit_cursor_x = 6
 edit_cursor_y = 6
 -- grid to hold block data
 blocks = {}
 for row=1,grid.height do
  blocks[row] = {}
  for col=1,grid.width do
   blocks[row][col] = {block_type=block_types["empty"],x=col,y=row,rotation=0,mirror=0,variation=0}
  end
 end

 blocks[6][1].block_type = block_types["input"]
 blocks[6][11].block_type = block_types["output"]

 if level.blocks ~= nil then
  for _,block in pairs(level.blocks) do
   blocks[block.row][block.col].block_type = block.block_type
   if block.rotation then blocks[block.row][block.col].rotation = block.rotation end
   if block.mirror then blocks[block.row][block.col].mirror = block.mirror end
   if block.variation then blocks[block.row][block.col].variation = block.variation end
  end
 end

end

function init_level_simulation()
 tick = 0   -- advances every update
 frame = 0  -- ball movement steps
 turn = 0   -- one per whole grid square of movement
 pixels_since_previous_turn = 0

 balls_moved_this_turn = 0

 edit_ticks_pressed = {[4]=-1} -- ignore button held down when changing modes

 -- state of any extant balls
 balls = {}
end

function init_level(level)
 init_level_simulation()
 init_level_queues()
 init_level_blocks()
end

function _update()
 if     (mode == 1) then -- edit
  update_edit()
 elseif (mode == 2) then -- run
  update_run()
 elseif (mode == 3) then -- review
  update_review()
 end
end

function update_edit()
 if (btnp(0)) then
  edit_cursor_x = (edit_cursor_x - 2) % grid.width + 1
  redraw = true
 end
 if (btnp(1)) then
  edit_cursor_x = edit_cursor_x % grid.width + 1
  redraw = true
 end
 if (btnp(2)) then
  edit_cursor_y = (edit_cursor_y - 2) % grid.width + 1
  redraw = true
 end
 if (btnp(3)) then
  edit_cursor_y = edit_cursor_y % grid.width + 1
  redraw = true
 end
 restart = false
 if (btn(4)) then
  if edit_ticks_pressed[4] >= 0 then
   edit_ticks_pressed[4] += 1
   if (
    edit_ticks_pressed[4] >= edit_long_press_threshold and
    (edit_ticks_pressed[4] - edit_long_press_threshold) % edit_long_press_repeat == 0
   ) then
    block_vary(blocks[edit_cursor_y][edit_cursor_x])
    restart = true
   end
  end
 else
  if edit_ticks_pressed[4] > 0 and edit_ticks_pressed[4] < edit_long_press_threshold then
   block_change(blocks[edit_cursor_y][edit_cursor_x])
   restart = true
  end
  edit_ticks_pressed[4] = 0
 end
 if restart == true then
  init_level_simulation()
  init_level_queues()
  redraw = true
 end 
 if (btnp(5)) then
  mode = 2
  redraw = true
 end
end

function update_run()
 if (tick == 0 and frame == 0 and turn == 0) then queue_to_inputs(queues[1]) end
 tick = tick + 1
 if (btnp(2)) then
  if (ticks_per_frame > 1) then
   ticks_per_frame /= 2
  elseif (pixels_per_frame < 8) then
   -- speed increase requires one tick of partial increase to align movement modulo new speed
   pixels_per_frame_next = pixels_per_frame * 2
   pixels_per_frame = pixels_per_frame_next - (pixels_since_previous_turn % pixels_per_frame_next)
  end
  redraw = true
 elseif (btnp(3)) then -- don't allow speed up and slow down in the same update
  if (pixels_per_frame > 1) then
   pixels_per_frame /= 2
   pixels_per_frame_next = pixels_per_frame
  elseif (ticks_per_frame < 32) then
   ticks_per_frame *= 2
  end
  redraw = true
 end
 if (btnp(5)) then
  mode = 1
 end
 if (tick >= ticks_per_frame) then
  redraw = true
  tick = 0
  frame = frame + 1
  balls_moved_this_turn = 0
  move_balls()
  if (balls_moved_this_turn == 0 and #queues[1].balls == 0) then
   review_status = "failed"
   review_color = 8
   mode = 3
  end
  launch_queued_balls()
  pixels_since_previous_turn += pixels_per_frame
  pixels_per_frame = pixels_per_frame_next
  if (pixels_since_previous_turn == 8) then
   pixels_since_previous_turn = 0
   frame = 0
   turn = turn + 1
   if (turn % 6 == 0) then
    queue_to_inputs(queues[1])
   end
  end
 end
end

function update_review()
 if (review_status == "failed" and btnp(5)) or (review_status == "success" and btnp(4)) then
  mode = 1
  init_level_queues()
  init_level_simulation()
  redraw = true
 elseif review_status == "success" and btnp(5) then
  mode = 1
  level = level.next
  init_level()
  redraw = true
 end
end

function _draw()
 if (redraw) then
  cls()
  print(level.name,80,1,7)
  print(modes[mode],80,8,7)
  if (mode ~= 3) then
   print(level.hint,8,15,7)
  end
  -- print(frame,0,0,8)
  -- print(turn,0,8,8)
  -- print(pixels_since_previous_turn,30,0)
  if (mode == 1) then -- edit
   if (blocks[edit_cursor_y][edit_cursor_x].block_type.name == "") then
    print("\142 add block",8,1,7)
   else
    print("\142 modify",8,1,7)
   end
   print("\151 run",8,8,7)
   print(blocks[edit_cursor_y][edit_cursor_x].block_type.name,44,22,7)
  elseif (mode == 2) then -- run
   print("\148 speed \131",8,1,7)
   print("\151 stop",8,8,7)
  elseif (mode == 3) then -- review
   if review_status == "success" then
    print("\142 retry",8,1,7)
    print("\151 advance",8,8,7)
   else
    print("\151 retry",8,8,7)    
   end
   print(review_status,44,15,review_color)
  end
  draw_grid()
  -- draw_blocks_walls()
  -- draw_blocks_back()
  draw_balls()
  draw_blocks_fore()
  draw_queues()
  redraw = false
  if (mode == 1) then -- edit
   draw_cursor()
  elseif (mode == 2) then -- run
   check_level_complete()
  end
 end
end

function draw_cursor()
 for x = grid.edge_left + (edit_cursor_x-1) * grid.cell_size, grid.edge_left + edit_cursor_x * grid.cell_size do
  for y = grid.edge_top + (edit_cursor_y-1) * grid.cell_size, grid.edge_top + edit_cursor_y * grid.cell_size do
   c = pget(x,y)
   if     (c == 0) then
    c = 7
   elseif (c == 7) then
    c = 0
   elseif (c == 5) then
    c = 6
   elseif (c == 6) then
    c = 5
   end
   pset(x,y,c)
  end
 end
end

function check_level_complete()
 if (#queues[2].balls == #queues[3].balls) then
  -- output queue empty
  if (compare_queues(queues[2].balls,queues[3].balls)) then
   review_status = "success"
   review_color = 11
  else
   review_status = "failed"
   review_color = 8
  end
  mode = 3 -- review
  redraw = true
 end
end

function draw_grid()
 if (false) then -- lines
  for x = grid.edge_left, grid.edge_right, grid.cell_size do
   line(x, grid.edge_top, x, grid.edge_bottom, grid.color)
  end
  for y = grid.edge_top, grid.edge_bottom, grid.cell_size do
   line(grid.edge_left, y, grid.edge_right, y, grid.color)
  end
 else -- dots
  for x = grid.edge_left, grid.edge_right, grid.cell_size do
   for y = grid.edge_top, grid.edge_bottom, grid.cell_size do
   pset(x,y,grid.color)
   end
  end
 end
end

-- function draw_blocks_walls()
--  foreach(blocks, function(row) foreach(row, draw_block_walls) end)
-- end

-- function draw_blocks_back()
--  foreach(blocks, function(row) foreach(row, draw_block_back) end)
-- end

function draw_blocks_fore()
 foreach(blocks, function(row) foreach(row, draw_block_fore) end)
end

-- function draw_block_walls(block)
--  if (block.block_type.walls ~= nil) then
--   -- fixme rotation
--   if (block.block_type.walls % 2 == 1) then -- east wall
--    line(
--      block.x    * grid.cell_size + grid.edge_left,
--     (block.y-1) * grid.cell_size + grid.edge_top,
--      block.x    * grid.cell_size + grid.edge_left,
--      block.y    * grid.cell_size + grid.edge_top,
--     grid.color
--    )
--   end
--   if (block.block_type.walls % 4 > 1) then -- south wall
--    line(
--     (block.x-1) * grid.cell_size + grid.edge_left,
--      block.y    * grid.cell_size + grid.edge_top,
--      block.x    * grid.cell_size + grid.edge_left,
--      block.y    * grid.cell_size + grid.edge_top,
--     grid.color
--    )
--   end
--   if (block.block_type.walls % 8 > 3) then -- west wall
--    line(
--     (block.x-1) * grid.cell_size + grid.edge_left,
--     (block.y-1) * grid.cell_size + grid.edge_top,
--     (block.x-1) * grid.cell_size + grid.edge_left,
--      block.y    * grid.cell_size + grid.edge_top,
--     grid.color
--    )
--   end
--   if (block.block_type.walls > 7) then -- north wall
--    line(
--     (block.x-1) * grid.cell_size + grid.edge_left,
--     (block.y-1) * grid.cell_size + grid.edge_top,
--      block.x    * grid.cell_size + grid.edge_left,
--     (block.y-1) * grid.cell_size + grid.edge_top,
--     grid.color
--    )
--   end
--  end
-- end

-- function draw_block_back(block)
--  if (block.block_type.sprite_back ~= nil) then
--   draw_block_sprite(block, block.block_type.sprite_back)
--  end
-- end

function draw_block_fore(block)
 if (block.block_type.sprite_fore ~= nil) then
  draw_block_sprite(block, block.block_type.sprite_fore)
 end
end

function draw_block_sprite(block, sprite)
 local block_type = block.block_type
 local flip_x = false
 local flip_y = false
 if block_type.rotations == 4 then
  if block.rotation % 2 == 1 then
   sprite += 1
  end
  if block.rotation % 4 > 1 then
   flip_x = true
   flip_y = true
  end
 end
 if block_type.mirrors == 2 then
  if block.mirror % 2 == 1 then
   flip_x = not flip_x
  end
 end
 if block_type.variations ~= nil then
  sprite += (block.variation % block.block_type.variations)
   *
   (block.block_type.rotations == 4 and 2 or 1)
 end
 spr(
  sprite,
  (block.x-1) * grid.cell_size + grid.edge_left + (flip_x and 1 or 0),
  (block.y-1) * grid.cell_size + grid.edge_top + (flip_y and 1 or 0),
  1,1,
  flip_x,flip_y
 )
end

function draw_balls()
 foreach(balls, draw_ball)
end

function draw_ball(ball)
 circfill(ball.x, ball.y, grid.ball_radius, ball.color+8)
 if (frame > 0) then
  if (ball.dx == 1) then
   spr(frame + 7, ball.x - grid.ball_radius, ball.y - grid.ball_radius)
  elseif (ball.dx == -1) then
   spr(frame + 7, ball.x - grid.ball_radius - 1, ball.y - grid.ball_radius, 1, 1, true)
  elseif (ball.dy == 1) then
   spr(frame, ball.x - grid.ball_radius, ball.y - grid.ball_radius)
  elseif (ball.dy == -1) then
   spr(frame, ball.x - grid.ball_radius, ball.y - grid.ball_radius - 1, 1, 1, false, true)
  end
 end
end

function move_balls()
 foreach(balls, move_ball)
end

function move_ball(ball)
 if (ball.dx ~= 0 or ball.dy ~= 0) then
  balls_moved_this_turn += 1
 end
 ball.x = ball.x + ball.dx * pixels_per_frame
 ball.y = ball.y + ball.dy * pixels_per_frame
 if (ball.x < grid.fence_left) then
  ball.x = grid.fence_left
  ball.dx = 0
 elseif (ball.x > grid.fence_right) then
  ball.x = grid.fence_right
  ball.dx = 0
 end
 if (ball.y < grid.fence_top) then
  ball.y = grid.fence_top
  ball.dy = 0
 elseif (ball.y > grid.fence_bottom) then
  ball.y = grid.fence_bottom
  ball.dy = 0
 end
 if (
  (ball.x - grid.edge_left - grid.ball_radius) % grid.cell_size == 1 and
  (ball.y - grid.edge_top - grid.ball_radius) % grid.cell_size == 1
 ) then
  local block = blocks
   [(ball.y-grid.edge_top-grid.ball_radius-1) / grid.cell_size + 1]
   [(ball.x-grid.edge_left-grid.ball_radius-1) / grid.cell_size + 1]
  if block.block_type.trigger_func ~= nil then block.block_type.trigger_func(block, ball) end
 end
end

function draw_queues()
 foreach(queues,draw_queue)
end

function draw_queue(queue)
 for i=1,#queue.balls do
  queue.func(queue.x+queue.dx*(i-1), queue.y+queue.dy*(i-1), queue.r, queue.balls[i]+8)
 end
end

function queue_to_inputs(queue)
 if (#queue.balls == 0) then return end
 ball_color = queue.balls[#queue.balls]
 queue.balls[#queue.balls] = nil
 foreach(
  blocks, 
  function(row) foreach(row,
   function(block) if (block.block_type == block_types["input"]) then launch(block, block.rotation % 4, ball_color) end end
  ) end
 )
end

function queue_launch(block, direction, color)
 launch_queue[#launch_queue+1] = {block,direction,color}
end

function launch_queued_balls()
 while #launch_queue > 0 do
  item = launch_queue[#launch_queue]
  launch(item[1], item[2], item[3])
  launch_queue[#launch_queue] = nil
 end
end

function launch(block, direction, color)
 local dx,dy = direction_to_delta(direction)
 balls[#balls+1] = {
  x = (block.x-1) * grid.cell_size + grid.edge_left + grid.ball_radius + 1,
  y = (block.y-1) * grid.cell_size + grid.edge_top  + grid.ball_radius + 1,
  dx = dx,
  dy = dy,
  color = color
 }
end

function compare_queues(q1, q2)
 if (#q1 != #q2) then return false end
 for i=1,#q1 do
  if (q1[i] != q2[i]) then return false end
 end
 return true
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000777000007770000077700000d8800000bbc000760000000000057000575000005550000000000000000000000000000000000000000000000000000000000
00700070007000700070007000ddd88000bbccc00676000000000057000575000050005000000000000000000000000000000000000000000000000000000000
0700000707000007070070070cdd88990aabbccd0067600005555575000575000507070500000000000000000000000000000000000000000000000000000000
0700777707007007070707070ccc09990aaa0ddd0006760007777750000575000500700500000000000000000000000000000000000000000000000000000000
0700000707007007070070070ccbbaa90a9988dd0000676005555575000575000507070500000000000000000000000000000000000000000000000000000000
00700070007070700070007000bbaaa0009998800000067600000057055757550050005000000000000000000000000000000000000000000000000000000000
000777000007770000077700000bba00000988000000006700000057077505770005550000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000077777000000077077707770777077000000077777000000000000000000000000000000777077707700777070000000000000000000000000000000
00000000777077700000700070707000700070700000770007700000000000000000000000000000700007007070707070000000000000000000000000000000
00000000770007700000777077707700770070700000770007700000000000000000000000000000770007007070777070000000000000000000000000000000
00000000770007700000007070007000700070700000777077700000000000000000000000000000700007007070707070000000000000000000000000000000
00000000077777000000770070007770777077700000077777000000000000000000000000000000700077707070707077700000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000077777000000077077700770777000000000000000000000000000000000000000000000777070707700000000000000000000000000000000000000
00000000770707700000700007007070707000000000000000000000000000000000000000000000707070707070000000000000000000000000000000000000
00000000777077700000777007007070777000000000000000000000000000000000000000000000770070707070000000000000000000000000000000000000
00000000770707700000007007007070700000000000000000000000000000000000000000000000707070707070000000000000000000000000000000000000
00000000077777000000770007007700700000000000000000000000000000000000000000000000707007707070000000000000000000000000000999000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000900000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000900000
00000000077077700770777070007770777000007770700077707770777007000000000000000000000000000000000000000000000000000000009000900000
00000000700070707070070070007000707000007070700070007070070007000000000000000000000000000000000000000000000000000000000999000000
00000000777077707070070070007700770000007770700077007700070007000000000000000000000000000000000000000000000000000000000000000000
00000000007070007070070070007000707000007070700070007070070000000000000000000000000000000000000000000000000000000000000888000000
00000000770070007700777077707770707000007070777077707070070007000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000888000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000888000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000888000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaa000000
0000000000000000500000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000000000a000a00000
0008880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000a00000
0088888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000a00000
00888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaa000000
00888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000999000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000900000
00099900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000900000
00999990000000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000500000000000009000900000
0099999000000000000000000000000000000007000000000000000000000ccc000d880000000000000000000700000000000000000000000000000999000000
009999900000000000000000000000000000007000000000000000000000ccccc0ddd88000000000000000000070000000000000000000000000000000000000
00099900000000000000000000000000000007000000000000000000000cccccccdd889900000000000000000007000000000000000000000000000999000000
00000000000000000000000000000000000070000000000000000000000ccccccccc099900000000000000000000700000000000000000000000009000900000
000aaa00000000000000000000000000000700000000000000000000000ccccccccbbaa900000000000000000000070000000000000000000000009000900000
00aaaaa00000000000000000000000000070000000000000000000000000ccccc0bbaaa000000000000000000000007000000000000000000000009000900000
00aaaaa000000000000000000000000007000000000000000000000000000ccc000bba0000000000000000000000000700000000000000000000000999000000
00aaaaa0000000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000500000000000000000000000
000aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbb000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000b00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000b00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000b00000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbb000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaa000000
0000000000000000500000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000000000a000a00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000a00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000a00000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008880000000000000000000000000aaa000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088888000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000888888800000000000000000000000aaa000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088888880000000000000000000000a000a00000
00000000000000000000000000000000000bbb00000000000000000000000000000000000000000000000000088888880000000000000000000000a000a00000
0000000000000000500000005000000050bbbbb0500000005000000050000000500000005000000050000000508888805000000050000000000000a000a00000
000000000000000000000000000000000bbbbbbb0000000000000000000000000000000000000000000000000008880000000000000000000000000aaa000000
000000000000000000000000000000000bbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000bbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000ccc000000
0000000000000000000000000000000000bbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000c000c00000
00000000000000000000000000000000000bbb00000000000000000000000000000000000000000000000000000000000000000000000000000000c000c00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000c00000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ccc000000
00000000000000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000500000000000000000000000
00000000000000000007770000000000000000070000000000000000000000000000000000000000000000000700000000077700000000000000000bbb000000
0000000000000000007000700000000000000007000000000000000000000000000000000000000000000000070000000070007000000000000000b000b00000
0000000000000000070000070000000000000070000000000000000000000000000000000000000000000000007000000700700700000000000000b000b00000
0000000000000000070077770000000007777700000000000000000000000000000000000000000000000000000777770707070700000000000000b000b00000
00000000000000000700000700000000000000700000000000000000000000000000000000000000000000000070000007007007000000000000000bbb000000
00000000000000000070007000000000000000070000000000000000000000000000000000000000000000000700000000700070000000000000000000000000
00000000000000000007770000000000000000070000000000000000000000000000000000000000000000000700000000077700000000000000000bbb000000
00000000000000005000000050000000500000005000000050000000500000005000000050000000500000005000000050ddddd050000000000000b000b00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddddddd00000000000000b000b00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddddddd00000000000000b000b00000
00000000000000000000000000000000000bbb00000000000000000000000000000000000000000000000000000000000ddddddd000000000000000bbb000000
0000000000000000000000000000000000bbbbb00000000000000000000000000000000000000000000000000000000000ddddd0000000000000000000000000
000000000000000000000000000000000bbbbbbb00000000000000000000000000000000000000000000000000000000000ddd00000000000000000ddd000000
000000000000000000000000000000000bbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000d000d00000
000000000000000000000000000000000bbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000d000d00000
0000000000000000500000005000000050bbbbb0500000005000000050000000500000005000000050000000500000005000000050000000000000d000d00000
00000000000000000000000000000000070bbb000000000000000000000000000000000000000ccc000000000000000700000000000000000000000ddd000000
0000000000000000000000000000000000700000000000000000000000000000000000000000ccccc00000000000000700000000000000000000000000000000
000000000000000000000000000000000007000000000000000000000000000000000000000ccccccc0000000000007000000000000000000000000ccc000000
000000000000000000000000000000000000700000000000000000000000000000000000000ccccccc000000077777000000000000000000000000c000c00000
000000000000000000000000000000000000070000000000000000000000000000000000000ccccccc000000000000700000000000000000000000c000c00000
0000000000000000000000000000000000000070000000000000000000000000000000000000ccccc0000000000000070000000000000000000000c000c00000
00000000000000000000000000000000000000070000000000000000000000000000000000000ccc000000000000000700000000000000000000000ccc000000
00000000000000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000500000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000007000000000000000ccc000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000000000007000000000000000c000c00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000070000000000000000c000c00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000000700000000000000000c000c00000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070000070000000000000000000ccc000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007000700000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000707000000000000000000000888000000
00000000000000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000500000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000800000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000888000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddd000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000d00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000d00000
0000000000000000500000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000000000d000d00000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddd000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddd000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddddd00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddddd00000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddddd00000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ddd000000
00000000000000005000000050000000500000005000000050000000500000005000000050000000500000005000000050000000500000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__gff__
0000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000000001200016000190001c0001f0002200024000270002a0002310026100291002b1002c1002c1002b1002a1002910028100291002910027100241002310021100201000000000000000000000000000
